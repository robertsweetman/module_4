name: Generate PDF

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install latest mdbook
        run: |
          tag=$(curl 'https://api.github.com/repos/rust-lang/mdbook/releases/latest' | jq -r '.tag_name')
          url="https://github.com/rust-lang/mdbook/releases/download/${tag}/mdbook-${tag}-x86_64-unknown-linux-gnu.tar.gz"
          mkdir -p mdbook
          curl -sSL $url | tar -xz --directory=./mdbook
          echo ${GITHUB_WORKSPACE}/mdbook >> $GITHUB_PATH

      - name: Install mdbook-mermaid preprocessor
        run: |
          curl -sSL https://github.com/badboy/mdbook-mermaid/releases/download/v0.12.6/mdbook-mermaid-v0.12.6-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook
          # Ensure the mdbook-mermaid executable is in PATH
          # echo ${GITHUB_WORKSPACE}/mdbook >> $GITHUB_PATH
          # Install mermaid support
          cd mdbook
          mdbook-mermaid install .

      - name: Set up image paths
        run: |
          # Create images directory at the root and copy images from mdbook/src/images
          mkdir -p images
          cp -r mdbook/src/images/* images/

          # Verify the images are in place
          ls -la images/

      - name: Create modified book without appendix/references
        run: |
          # Create a copy of the mdbook source
          cp -r mdbook mdbook_main_content

          # Create a modified version of SUMMARY.md that excludes 7_appendix.md and 8_references.md
          cd mdbook_main_content
          
          # Create the modified SUMMARY.md by removing lines containing 7_appendix.md and 8_references.md
          cat src/SUMMARY.md | grep -v -E '7_appendix\.md|8_references\.md' > src/SUMMARY.md.new
          mv src/SUMMARY.md.new src/SUMMARY.md
          
          # Build the modified book
          mdbook build
          
          # Go back to root
          cd ..
          
          # Copy the built book to the root for PDF generation
          cp -r mdbook_main_content/book ./book_main_content

      - name: Build Full Book
        run: |
          # Change to the mdbook directory and build the book
          cd mdbook
          mdbook build
          cd ..

          # Copy the built book to the root for PDF generation
          cp -r mdbook/book ./book

          # Verify the books were copied
          echo "Full book contents:"
          ls -la book/
          echo "Main content book (no appendix/references):"
          ls -la book_main_content/

      # Add Node.js setup for Puppeteer
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Puppeteer
        run: npm install puppeteer@13.5.0

      - name: Generate PDFs using Puppeteer
        run: |
          cat > pdf-generator.js << 'EOL'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');

          // Helper function for waiting
          async function wait(page, ms) {
            if (page.waitForTimeout) {
              await page.waitForTimeout(ms);
            } else if (page.waitFor) {
              await page.waitFor(ms);
            } else {
              await new Promise(resolve => setTimeout(resolve, ms));
            }
          }

          // Function to generate PDF from HTML
          async function generatePDF(htmlPath, pdfPath, options) {
            const browser = await puppeteer.launch({
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            try {
              const page = await browser.newPage();
              
              // Set viewport to A4 size
              await page.setViewport({
                width: 1240,
                height: 1754,
                deviceScaleFactor: 1,
              });
              
              // Navigate to the print.html page
              await page.goto(`file://${process.cwd()}/${htmlPath}`, {
                waitUntil: 'networkidle0'
              });
              
              // Wait for mermaid diagrams to render
              await wait(page, 3000);
              
              // Force mermaid to re-render
              await page.evaluate(() => {
                if (typeof mermaid !== 'undefined') {
                  mermaid.init(undefined, document.querySelectorAll('.mermaid'));
                }
              });
              
              // Wait again for rendering
              await wait(page, 2000);
              
              // Generate PDF
              await page.pdf({
                path: pdfPath,
                format: 'A4',
                printBackground: true,
                ...options
              });
              
              console.log(`PDF generated: ${pdfPath}`);
            } finally {
              await browser.close();
            }
          }

          (async () => {
            // Generate full PDF
            await generatePDF('book/print.html', 'full_content.pdf', {
              margin: { top: '5mm', right: '5mm', bottom: '5mm', left: '5mm' },
              displayHeaderFooter: true,
              footerTemplate: '<div style="width: 100%; text-align: right; font-size: 8pt; color: #999; padding-right: 10px;"><span class="pageNumber"></span>/<span class="totalPages"></span></div>',
              headerTemplate: '<div></div>'
            });
            
            // Generate main content PDF (no appendix/references)
            await generatePDF('book_main_content/print.html', 'main_content.pdf', {
              margin: { top: '5mm', right: '5mm', bottom: '5mm', left: '5mm' },
              displayHeaderFooter: true,
              footerTemplate: '<div style="width: 100%; text-align: right; font-size: 8pt; color: #999; padding-right: 10px;"><span class="pageNumber"></span>/<span class="totalPages"></span></div>',
              headerTemplate: '<div></div>'
            });
            
            console.log('All PDFs generated successfully');
          })().catch(err => {
            console.error('Error generating PDFs:', err);
            process.exit(1);
          });
          EOL

          node pdf-generator.js

          # Check file sizes
          ls -la *.pdf
          echo "Generated both full content and main content PDFs"

      - name: Install Pandoc and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc libreoffice

      - name: Generate Word Documents
        run: |
          # Convert the full content PDF to DOCX
          echo "Converting full content PDF to Word format..."
          soffice --headless --convert-to docx full_content.pdf
          
          # Convert the main content PDF to DOCX
          echo "Converting main content PDF to Word format..."
          soffice --headless --convert-to docx main_content.pdf
          
          # Also create Word documents directly from HTML
          echo "Converting full content HTML to Word format..."
          pandoc -f html -t docx book/print.html -o full_content_from_html.docx --extract-media=extracted_media_full
          
          echo "Converting main content HTML to Word format..."
          pandoc -f html -t docx book_main_content/print.html -o main_content_from_html.docx --extract-media=extracted_media_main
          
          # Get text-only content from HTML for accurate word counting
          pandoc -f html -t plain book/print.html > full_text_content.txt
          pandoc -f html -t plain book_main_content/print.html > main_content_text.txt
          
          # Calculate word counts
          TOTAL_WORDS=$(wc -w < full_text_content.txt)
          MAIN_WORDS=$(wc -w < main_content_text.txt)
          
          # Calculate the words in appendix and references
          APPENDIX_REF_WORDS=$((TOTAL_WORDS - MAIN_WORDS))
          
          # Create the word count info file
          echo "=== Word Count Information ===" > word_count_info.txt
          echo "Full document word count: $TOTAL_WORDS" >> word_count_info.txt
          echo "Main content word count (no appendix/references): $MAIN_WORDS" >> word_count_info.txt
          echo "Words in appendix and references: $APPENDIX_REF_WORDS" >> word_count_info.txt
          echo "" >> word_count_info.txt
          
          # List produced files
          ls -la *.docx *.pdf
          cat word_count_info.txt
          echo "Generated Word documents for both full content and main content"

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: presentation-pdf
          path: "*.pdf"

      - name: Upload Word Document as artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-word
          path: |
            *.docx
            word_count_info.txt
            extracted_media*/
